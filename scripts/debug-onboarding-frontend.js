// scripts/debug-onboarding-frontend.js
require('dotenv').config({ path: '../.env.local' });

/**
 * Script para debuggear el problema del onboarding frontend
 * Verifica qu√© datos se est√°n cargando desde la API
 */

async function debugOnboardingFrontend() {
  console.log('üîç DEBUG ONBOARDING FRONTEND');
  console.log('============================\n');

  try {
    // Simular la llamada a la API que hace el frontend
    console.log('üì° Llamando a la API de neighborhoods...');
    const response = await fetch('http://localhost:3000/api/neighborhoods');

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const neighborhoods = await response.json();
    console.log(`‚úÖ API respondi√≥ con ${neighborhoods.length} neighborhoods\n`);

    // Analizar los datos como lo hace el frontend
    console.log('üîç ANALIZANDO DATOS COMO EL FRONTEND:');
    console.log('=====================================\n');

    // Funci√≥n getUniqueCountries (como en el frontend)
    const getUniqueCountries = () => {
      const countries = neighborhoods
        .map(n => n.properties.country)
        .filter((country, index, arr) => country && arr.indexOf(country) === index);

      console.log('üåç Pa√≠ses encontrados en neighborhoods:');
      console.log('   - Datos crudos:', neighborhoods.map(n => n.properties.country).slice(0, 10));
      console.log('   - Pa√≠ses √∫nicos:', countries);

      // Si no hay pa√≠ses en los barrios, agregar Argentina por defecto
      if (countries.length === 0) {
        console.log('   ‚ö†Ô∏è  No se encontraron pa√≠ses, agregando Argentina por defecto');
        return ['Argentina'];
      }

      return countries.sort();
    };

    // Funci√≥n getCitiesForCountry (como en el frontend)
    const getCitiesForCountry = (country) => {
      const cities = neighborhoods
        .filter(n => n.properties.country === country)
        .map(n => n.properties.city)
        .filter((city, index, arr) => city && arr.indexOf(city) === index);

      console.log(`üèôÔ∏è  Ciudades para ${country}:`);
      console.log(`   - Datos crudos:`, neighborhoods.filter(n => n.properties.country === country).map(n => n.properties.city).slice(0, 5));
      console.log(`   - Ciudades √∫nicas:`, cities);

      // Si no hay ciudades para el pa√≠s, agregar opciones por defecto
      if (cities.length === 0) {
        if (country === 'Argentina') {
          console.log(`   ‚ö†Ô∏è  No se encontraron ciudades para ${country}, agregando Mar del Plata por defecto`);
          return ['Mar del Plata'];
        } else if (country === 'USA') {
          console.log(`   ‚ö†Ô∏è  No se encontraron ciudades para ${country}, agregando San Francisco por defecto`);
          return ['San Francisco'];
        }
      }

      return cities.sort();
    };

    // Ejecutar an√°lisis
    const countries = getUniqueCountries();
    console.log(`\nüìã PA√çSES FINALES: ${countries.join(', ')}`);

    countries.forEach(country => {
      const cities = getCitiesForCountry(country);
      console.log(`\nüìã CIUDADES PARA ${country}: ${cities.join(', ')}`);
    });

    // Verificar estructura de datos
    console.log('\nüîç VERIFICACI√ìN DE ESTRUCTURA DE DATOS:');
    console.log('========================================');

    if (neighborhoods.length > 0) {
      const sample = neighborhoods[0];
      console.log('üìÑ Estructura del primer neighborhood:');
      console.log('   - Tiene properties:', !!sample.properties);
      console.log('   - Tiene country:', !!sample.properties?.country);
      console.log('   - Tiene city:', !!sample.properties?.city);
      console.log('   - Country value:', sample.properties?.country);
      console.log('   - City value:', sample.properties?.city);
    }

    // Verificar si hay neighborhoods sin country
    const withoutCountry = neighborhoods.filter(n => !n.properties?.country);
    if (withoutCountry.length > 0) {
      console.log(`\n‚ö†Ô∏è  WARNING: ${withoutCountry.length} neighborhoods sin pa√≠s definido`);
    }

    // Verificar si hay neighborhoods sin city
    const withoutCity = neighborhoods.filter(n => !n.properties?.city);
    if (withoutCity.length > 0) {
      console.log(`‚ö†Ô∏è  WARNING: ${withoutCity.length} neighborhoods sin ciudad definida`);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);

    if (error.message.includes('fetch')) {
      console.log('\nüí° SUGERENCIAS:');
      console.log('   - Aseg√∫rate de que el servidor est√© corriendo en localhost:3000');
      console.log('   - Verifica que la API /api/neighborhoods est√© disponible');
    }
  }
}

// Ejecutar el debug
debugOnboardingFrontend().catch(console.error);
